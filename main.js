// Generated by CoffeeScript 1.7.1
var LINE_MAX_SIZE, canvas, ctx, drawRect, init, line, mouseMoveListener, mousePoint, start, _i, _results;

canvas = null;

ctx = null;

LINE_MAX_SIZE = 10;

mousePoint = {
  x: 0,
  y: 0
};

line = (function() {
  _results = [];
  for (var _i = 0; 0 <= LINE_MAX_SIZE ? _i <= LINE_MAX_SIZE : _i >= LINE_MAX_SIZE; 0 <= LINE_MAX_SIZE ? _i++ : _i--){ _results.push(_i); }
  return _results;
}).apply(this);

window.onload = function() {
  init();
  start();
  return void 0;
};

init = function() {
  canvas = document.getElementById("can");
  ctx = canvas.getContext('2d');
  canvas.onmousemove = mouseMoveListener;
  return void 0;
};

start = function() {
  document.addEventListener("mousemove", drawRect());
  return void 0;
};

drawRect = function() {
  ctx.beginPath();
  return void 0;
};

mouseMoveListener = function(e) {
  var i, rect, _j, _k;
  rect = e.target.getBoundingClientRect();
  mousePoint.x = e.clientX - rect.left;
  mousePoint.y = e.clientY - rect.top;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  for (i = _j = 0; 0 <= LINE_MAX_SIZE ? _j <= LINE_MAX_SIZE : _j >= LINE_MAX_SIZE; i = 0 <= LINE_MAX_SIZE ? ++_j : --_j) {
    if (i === 0) {
      line[0] = {
        x: mousePoint.x,
        y: mousePoint.y
      };
    } else {
      ctx.fillRect(mousePoint.x + i, line[i - 1].y, 1, 1);
      ctx.fillRect(mousePoint.x - i, line[i - 1].y, 1, 1);
      console.log(line[i - 1]);
    }
  }
  for (i = _k = LINE_MAX_SIZE; _k >= 1; i = _k += -1) {
    line[i] = line[i - 1];
  }
  return void 0;
};
